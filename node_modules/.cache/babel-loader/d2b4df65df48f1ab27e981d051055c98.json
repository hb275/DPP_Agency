{"ast":null,"code":"var _jsxFileName = \"/Users/hosseinbagheri/Desktop/example/src/pages/Forms.tsx\";\nimport React from 'react';\nimport { Field, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { Alert, Button, ComboBox, Form, FormGroup, Label, TextInput, ValidationChecklist, ValidationItem, DatePicker, FileInput } from '@trussworks/react-uswds';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst FormSchema = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().min(8).max(20).required(),\n  fruit: Yup.string().nullable()\n});\nconst fruits = {\n  apple: 'Apple',\n  apricot: 'Apricot',\n  avocado: 'Avocado',\n  banana: 'Banana',\n  blackberry: 'Blackberry',\n  'blood orange': 'Blood orange',\n  blueberry: 'Blueberry',\n  boysenberry: 'Boysenberry',\n  breadfruit: 'Breadfruit'\n};\nconst fruitOptions = Object.entries(fruits).map(_ref => {\n  let [value, key] = _ref;\n  return {\n    value: value,\n    label: key\n  };\n});\n\nconst FormsPage = () => {\n  const fileInputRef = /*#__PURE__*/React.createRef();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Forms Examples\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Formik\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: '',\n          password: '',\n          fruit: 'avocado',\n          appointmentDate: '1/20/2021',\n          file: '',\n          attachments: []\n        },\n        validationSchema: FormSchema,\n        onSubmit: (values, _ref2) => {\n          let {\n            setSubmitting\n          } = _ref2;\n          console.log('Submit form data:', values);\n          setTimeout(() => {\n            console.log('Submit complete!');\n            setSubmitting(false);\n          }, 400);\n        },\n        children: _ref3 => {\n          let {\n            values,\n            errors,\n            touched,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue\n          } = _ref3;\n          return /*#__PURE__*/_jsxDEV(Form, {\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Form data\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n                children: JSON.stringify(values)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 78,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this), touched.email && errors.email && /*#__PURE__*/_jsxDEV(Alert, {\n              type: \"info\",\n              validation: true,\n              heading: \"Email Requirements\",\n              children: /*#__PURE__*/_jsxDEV(ValidationChecklist, {\n                id: \"validate-email\",\n                children: [/*#__PURE__*/_jsxDEV(ValidationItem, {\n                  id: \"required\",\n                  isValid: values.email.length > 0,\n                  children: \"Include required field.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ValidationItem, {\n                  id: \"validFormat\",\n                  isValid: !errors.email,\n                  children: \"Use only valid email formatting\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 21\n                }, this), errors.email]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"email\",\n              children: \"Email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              as: TextInput,\n              type: \"email\",\n              name: \"email\",\n              id: \"email\",\n              value: values.email\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 15\n            }, this), touched.password && errors.password && /*#__PURE__*/_jsxDEV(Alert, {\n              type: \"info\",\n              validation: true,\n              heading: \"Password Requirements\",\n              children: /*#__PURE__*/_jsxDEV(ValidationChecklist, {\n                id: \"validate-password\",\n                children: [/*#__PURE__*/_jsxDEV(ValidationItem, {\n                  id: \"required\",\n                  isValid: values.password.length > 0,\n                  children: \"Include required field.\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(ValidationItem, {\n                  id: \"length\",\n                  isValid: !errors.password,\n                  children: \"Length is between 8-20 characters\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 112,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"password\",\n              children: \"Password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              as: TextInput,\n              type: \"password\",\n              name: \"password\",\n              id: \"password\",\n              value: values.password\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Label, {\n              htmlFor: \"fruit\",\n              children: \"My Favorite Fruit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              as: ComboBox,\n              name: \"fruit\",\n              id: \"fruit\",\n              options: fruitOptions,\n              onChange: val => setFieldValue('fruit', val, true),\n              defaultValue: \"avocado\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                id: \"appointment-date-label\",\n                htmlFor: \"appointment-date\",\n                children: \"Appointment date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 136,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"usa-hint\",\n                id: \"appointment-date-hint\",\n                children: \"mm/dd/yyyy\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                as: DatePicker,\n                id: \"appointmentDate\",\n                name: \"appointmentDate\",\n                \"aria-describedby\": \"appointment-date-label appointment-date-hint\",\n                defaultValue: \"2021-01-01\",\n                onChange: val => setFieldValue('appointmentDate', val, true)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 142,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 135,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"file\",\n                children: \"File input (single)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FileInput, {\n                id: \"file\",\n                name: \"file\",\n                onChange: e => {\n                  var _event$target$files;\n\n                  const event = e;\n\n                  if ((_event$target$files = event.target.files) !== null && _event$target$files !== void 0 && _event$target$files.length) {\n                    setFieldValue('file', event.target.files[0]);\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 154,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n              children: [/*#__PURE__*/_jsxDEV(Label, {\n                htmlFor: \"attachments\",\n                children: \"File input (multiple)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(FileInput, {\n                id: \"attachments\",\n                name: \"attachments\",\n                multiple: true,\n                onChange: e => {\n                  var _event$target$files2;\n\n                  const event = e;\n                  const files = [];\n\n                  if ((_event$target$files2 = event.target.files) !== null && _event$target$files2 !== void 0 && _event$target$files2.length) {\n                    for (let i = 0; i < ((_event$target$files3 = event.target.files) === null || _event$target$files3 === void 0 ? void 0 : _event$target$files3.length); i++) {\n                      var _event$target$files3;\n\n                      files.push(event.target.files[i]);\n                    }\n                  }\n\n                  setFieldValue('attachments', files);\n                },\n                onDrop: e => {\n                  console.log('handle drop', e);\n                },\n                ref: fileInputRef\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 171,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: isSubmitting,\n              children: \"Submit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 13\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_c = FormsPage;\nexport default FormsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"FormsPage\");","map":{"version":3,"sources":["/Users/hosseinbagheri/Desktop/example/src/pages/Forms.tsx"],"names":["React","Field","Formik","Yup","Alert","Button","ComboBox","Form","FormGroup","Label","TextInput","ValidationChecklist","ValidationItem","DatePicker","FileInput","FormSchema","object","shape","email","string","required","password","min","max","fruit","nullable","fruits","apple","apricot","avocado","banana","blackberry","blueberry","boysenberry","breadfruit","fruitOptions","Object","entries","map","value","key","label","FormsPage","fileInputRef","createRef","appointmentDate","file","attachments","values","setSubmitting","console","log","setTimeout","errors","touched","handleSubmit","isSubmitting","setFieldValue","JSON","stringify","length","val","e","event","target","files","i","push"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Field, Formik } from 'formik'\nimport * as Yup from 'yup'\nimport {\n  Alert,\n  Button,\n  ComboBox,\n  Form,\n  FormGroup,\n  Label,\n  TextInput,\n  ValidationChecklist,\n  ValidationItem,\n  DatePicker,\n  FileInput,\n  FileInputRef,\n} from '@trussworks/react-uswds'\n\nconst FormSchema = Yup.object().shape({\n  email: Yup.string().email().required(),\n  password: Yup.string().min(8).max(20).required(),\n  fruit: Yup.string().nullable(),\n})\n\nconst fruits = {\n  apple: 'Apple',\n  apricot: 'Apricot',\n  avocado: 'Avocado',\n  banana: 'Banana',\n  blackberry: 'Blackberry',\n  'blood orange': 'Blood orange',\n  blueberry: 'Blueberry',\n  boysenberry: 'Boysenberry',\n  breadfruit: 'Breadfruit',\n}\n\nconst fruitOptions = Object.entries(fruits).map(([value, key]) => ({\n  value: value,\n  label: key,\n}))\n\nconst FormsPage = (): React.ReactElement => {\n  const fileInputRef = React.createRef<FileInputRef>()\n\n  return (\n    <>\n      <h1>Forms Examples</h1>\n      <section>\n        <h2>Formik</h2>\n        <Formik\n          initialValues={{\n            email: '',\n            password: '',\n            fruit: 'avocado',\n            appointmentDate: '1/20/2021',\n            file: '',\n            attachments: [],\n          }}\n          validationSchema={FormSchema}\n          onSubmit={(values, { setSubmitting }) => {\n            console.log('Submit form data:', values)\n            setTimeout(() => {\n              console.log('Submit complete!')\n              setSubmitting(false)\n            }, 400)\n          }}>\n          {({\n            values,\n            errors,\n            touched,\n            handleSubmit,\n            isSubmitting,\n            setFieldValue,\n          }) => (\n            <Form onSubmit={handleSubmit}>\n              <div>\n                <span>Form data</span>\n                <pre>{JSON.stringify(values)}</pre>\n              </div>\n\n              {touched.email && errors.email && (\n                <Alert type=\"info\" validation heading=\"Email Requirements\">\n                  <ValidationChecklist id=\"validate-email\">\n                    <ValidationItem\n                      id=\"required\"\n                      isValid={values.email.length > 0}>\n                      Include required field.\n                    </ValidationItem>\n                    <ValidationItem id=\"validFormat\" isValid={!errors.email}>\n                      Use only valid email formatting\n                    </ValidationItem>\n                    {errors.email}\n                  </ValidationChecklist>\n                </Alert>\n              )}\n              <Label htmlFor=\"email\">Email</Label>\n              <Field\n                as={TextInput}\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={values.email}\n              />\n              {touched.password && errors.password && (\n                <Alert type=\"info\" validation heading=\"Password Requirements\">\n                  <ValidationChecklist id=\"validate-password\">\n                    <ValidationItem\n                      id=\"required\"\n                      isValid={values.password.length > 0}>\n                      Include required field.\n                    </ValidationItem>\n                    <ValidationItem id=\"length\" isValid={!errors.password}>\n                      Length is between 8-20 characters\n                    </ValidationItem>\n                  </ValidationChecklist>\n                </Alert>\n              )}\n              <Label htmlFor=\"password\">Password</Label>\n              <Field\n                as={TextInput}\n                type=\"password\"\n                name=\"password\"\n                id=\"password\"\n                value={values.password}\n              />\n              <Label htmlFor=\"fruit\">My Favorite Fruit</Label>\n              <Field\n                as={ComboBox}\n                name=\"fruit\"\n                id=\"fruit\"\n                options={fruitOptions}\n                onChange={(val: string) => setFieldValue('fruit', val, true)}\n                defaultValue=\"avocado\"></Field>\n\n              <FormGroup>\n                <Label id=\"appointment-date-label\" htmlFor=\"appointment-date\">\n                  Appointment date\n                </Label>\n                <div className=\"usa-hint\" id=\"appointment-date-hint\">\n                  mm/dd/yyyy\n                </div>\n                <Field\n                  as={DatePicker}\n                  id=\"appointmentDate\"\n                  name=\"appointmentDate\"\n                  aria-describedby=\"appointment-date-label appointment-date-hint\"\n                  defaultValue=\"2021-01-01\"\n                  onChange={(val: string) =>\n                    setFieldValue('appointmentDate', val, true)\n                  }\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label htmlFor=\"file\">File input (single)</Label>\n                <FileInput\n                  id=\"file\"\n                  name=\"file\"\n                  onChange={(e: React.ChangeEvent): void => {\n                    const event = e as React.ChangeEvent<HTMLInputElement>\n\n                    if (event.target.files?.length) {\n                      setFieldValue('file', event.target.files[0])\n                    }\n                  }}\n                />\n              </FormGroup>\n\n              <FormGroup>\n                <Label htmlFor=\"attachments\">File input (multiple)</Label>\n                <FileInput\n                  id=\"attachments\"\n                  name=\"attachments\"\n                  multiple\n                  onChange={(e: React.ChangeEvent): void => {\n                    const event = e as React.ChangeEvent<HTMLInputElement>\n                    const files = []\n                    if (event.target.files?.length) {\n                      for (let i = 0; i < event.target.files?.length; i++) {\n                        files.push(event.target.files[i])\n                      }\n                    }\n                    setFieldValue('attachments', files)\n                  }}\n                  onDrop={(e: React.DragEvent): void => {\n                    console.log('handle drop', e)\n                  }}\n                  ref={fileInputRef}\n                />\n              </FormGroup>\n\n              <Button type=\"submit\" disabled={isSubmitting}>\n                Submit\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </section>\n    </>\n  )\n}\n\nexport default FormsPage\n"]},"metadata":{},"sourceType":"module"}